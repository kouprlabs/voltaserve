package runtime

import (
	"github.com/kouprlabs/voltaserve/conversion/config"
	"github.com/kouprlabs/voltaserve/conversion/infra"
)

type Installer struct {
	cmd       *infra.Command
	config    *config.Config
	isRunning bool
}

func NewInstaller() *Installer {
	return &Installer{
		cmd:    infra.NewCommand(),
		config: config.GetConfig(),
	}
}

func (d *Installer) IsRunning() bool {
	return d.isRunning
}

func (d *Installer) Start() {
	go func() {
		d.isRunning = true
		if d.config.EnableInstaller {
			d.updatePackageList()
			d.installCoreTools()
			d.installGltfPipeline()
			d.installScreenshotGLB()
			d.installBrowsersDeps()
			d.installBrowsers()
			d.installLibreOffice()
			d.installTesseract()
			d.installFonts()
		}
		d.isRunning = false
	}()
}

func (d *Installer) updatePackageList() {
	infra.GetLogger().Named(infra.StrInstaller).Infow("↻  updating", "debian", "package list")
	if err := d.cmd.Exec("apt-get", "update"); err != nil {
		infra.GetLogger().Error(err)
		infra.GetLogger().Named(infra.StrInstaller).Infow("❌️  failed", "debian", "package list")
		return
	}
	infra.GetLogger().Named(infra.StrInstaller).Infow("✅️  completed", "debian", "package list")
}

func (d *Installer) installCoreTools() {
	infra.GetLogger().Named(infra.StrInstaller).Infow("⬇️  installing", "package", "core-tools")
	packages := []string{
		"curl",
		"ffmpeg",
		"gawk",
		"ghostscript",
		"imagemagick",
		"libvips-dev",
		"poppler-utils",
		"libimage-exiftool-perl",
		"ocrmypdf",
		"qpdf",
		"unzip",
		"nodejs",
		"npm",
	}
	args := append([]string{"install", "-y"}, packages...)
	if err := d.cmd.Exec("apt-get", args...); err != nil {
		infra.GetLogger().Error(err)
		infra.GetLogger().Named(infra.StrInstaller).Infow("❌️  failed", "package", "core-tools")
		return
	}
	infra.GetLogger().Named(infra.StrInstaller).Infow("✅️  completed", "package", "core-tools")
}

func (d *Installer) installGltfPipeline() {
	infra.GetLogger().Named(infra.StrInstaller).Infow("⬇️  installing", "package", "gltf-pipeline")
	if err := d.cmd.Exec("npm", "i", "-g", "gltf-pipeline@4.1.0"); err != nil {
		infra.GetLogger().Error(err)
		infra.GetLogger().Named(infra.StrInstaller).Infow("❌️  failed", "package", "gltf-pipeline")
		return
	}
	infra.GetLogger().Named(infra.StrInstaller).Infow("✅️  completed", "package", "gltf-pipeline")
}

func (d *Installer) installScreenshotGLB() {
	infra.GetLogger().Named(infra.StrInstaller).Infow("⬇️  installing", "package", "@koupr/screenshot-glb")
	if err := d.cmd.Exec("npm", "i", "-g", "@koupr/screenshot-glb@1.10.6"); err != nil {
		infra.GetLogger().Error(err)
		infra.GetLogger().Named(infra.StrInstaller).Infow("❌️  failed", "package", "@koupr/screenshot-glb")
		return
	}
	infra.GetLogger().Named(infra.StrInstaller).Infow("✅️  completed", "package", "@koupr/screenshot-glb")
}

func (d *Installer) installBrowsersDeps() {
	infra.GetLogger().Named(infra.StrInstaller).Infow("⬇️  installing", "package", "browsers-deps")
	if err := d.cmd.Exec("npx", "playwright", "install-deps"); err != nil {
		infra.GetLogger().Error(err)
		infra.GetLogger().Named(infra.StrInstaller).Infow("❌️  failed", "package", "browsers-deps")
		return
	}
	infra.GetLogger().Named(infra.StrInstaller).Infow("✅️  completed", "package", "browsers-deps")
}

func (d *Installer) installBrowsers() {
	infra.GetLogger().Named(infra.StrInstaller).Infow("⬇️  installing", "package", "browsers")
	if err := d.cmd.Exec("npx", "playwright", "install"); err != nil {
		infra.GetLogger().Error(err)
		infra.GetLogger().Named(infra.StrInstaller).Infow("❌️  failed", "package", "browsers")
		return
	}
	infra.GetLogger().Named(infra.StrInstaller).Infow("✅️  completed", "package", "browsers")
}

func (d *Installer) installLibreOffice() {
	infra.GetLogger().Named(infra.StrInstaller).Infow("⬇️  installing", "package", "libreoffice")
	packages := []string{
		"libreoffice",
		"libreoffice-core",
		"libreoffice-writer",
		"libreoffice-calc",
		"libreoffice-impress",
		"libreoffice-draw",
		"libreoffice-math",
	}
	args := append([]string{"install", "-y"}, packages...)
	if err := d.cmd.Exec("apt-get", args...); err != nil {
		infra.GetLogger().Error(err)
		infra.GetLogger().Named(infra.StrInstaller).Infow("❌️  failed", "package", "libreoffice")
		return
	}
	infra.GetLogger().Named(infra.StrInstaller).Infow("✅️  completed", "package", "libreoffice")
}

func (d *Installer) installTesseract() {
	infra.GetLogger().Named(infra.StrInstaller).Infow("⬇️  installing", "package", "tesseract")
	packages := []string{
		"tesseract-ocr",
		"tesseract-ocr-osd",
		"tesseract-ocr-ara",
		"tesseract-ocr-chi-sim",
		"tesseract-ocr-chi-tra",
		"tesseract-ocr-eng",
		"tesseract-ocr-fra",
		"tesseract-ocr-deu",
		"tesseract-ocr-por",
		"tesseract-ocr-spa",
		"tesseract-ocr-nld",
		"tesseract-ocr-ita",
		"tesseract-ocr-jpn",
		"tesseract-ocr-nor",
		"tesseract-ocr-swe",
		"tesseract-ocr-fin",
		"tesseract-ocr-dan",
		"tesseract-ocr-rus",
	}
	args := append([]string{"install", "-y"}, packages...)
	if err := d.cmd.Exec("apt-get", args...); err != nil {
		infra.GetLogger().Error(err)
		infra.GetLogger().Named(infra.StrInstaller).Infow("❌️  failed", "package", "tesseract")
		return
	}
	infra.GetLogger().Named(infra.StrInstaller).Infow("✅️  completed", "package", "tesseract")
}

//nolint:maintidx
func (d *Installer) installFonts() {
	infra.GetLogger().Named(infra.StrInstaller).Infow("⬇️  installing", "package", "fonts")
	packages := []string{
		"fonts-3270",
		"fonts-adf-accanthis",
		"fonts-adf-baskervald",
		"fonts-adf-berenis",
		"fonts-adf-gillius",
		"fonts-adf-ikarius",
		"fonts-adf-irianis",
		"fonts-adf-libris",
		"fonts-adf-mekanus",
		"fonts-adf-oldania",
		"fonts-adf-romande",
		"fonts-adf-solothurn",
		"fonts-adf-switzera",
		"fonts-adf-tribun",
		"fonts-adf-universalis",
		"fonts-adf-verana",
		"fonts-aenigma",
		"fonts-agave",
		"fonts-aksharyogini2",
		"fonts-alee",
		"fonts-alegreya-sans",
		"fonts-allerta",
		"fonts-amiga",
		"fonts-ancient-scripts",
		"fonts-anonymous-pro",
		"fonts-aoyagi-kouzan-t",
		"fonts-aoyagi-soseki",
		"fonts-apropal",
		"fonts-arabeyes",
		"fonts-arapey",
		"fonts-arkpandora",
		"fonts-arphic-bkai00mp",
		"fonts-arphic-bsmi00lp",
		"fonts-arphic-gbsn00lp",
		"fonts-arphic-gkai00mp",
		"fonts-arphic-ukai",
		"fonts-arphic-uming",
		"fonts-arundina",
		"fonts-atarismall",
		"fonts-atarist",
		"fonts-atkinson-hyperlegible",
		"fonts-atkinson-hyperlegible-ttf",
		"fonts-atkinson-hyperlegible-web",
		"fonts-averia-gwf",
		"fonts-averia-sans-gwf",
		"fonts-averia-serif-gwf",
		"fonts-b612",
		"fonts-babelstone-han",
		"fonts-babelstone-modern",
		"fonts-baekmuk",
		"fonts-bajaderka",
		"fonts-bebas-neue",
		"fonts-beng",
		"fonts-beng-extra",
		"fonts-beteckna",
		"fonts-blankenburg",
		"fonts-bpg-georgian",
		"fonts-breip",
		"fonts-bwht",
		"fonts-cabin",
		"fonts-cabinsketch",
		"fonts-campania",
		"fonts-cantarell",
		"fonts-cardo",
		"fonts-cascadia-code",
		"fonts-cegui",
		"fonts-century-catalogue",
		"fonts-cherrybomb",
		"fonts-chomsky",
		"fonts-circos-symbols",
		"fonts-clear-sans",
		"fonts-cmu",
		"fonts-cns11643-kai",
		"fonts-cns11643-sung",
		"fonts-comfortaa",
		"fonts-comic-neue",
		"fonts-compagnon",
		"fonts-courier-prime",
		"fonts-creep2",
		"fonts-croscore",
		"fonts-crosextra-caladea",
		"fonts-crosextra-carlito",
		"fonts-cwtex-docs",
		"fonts-cwtex-fs",
		"fonts-cwtex-heib",
		"fonts-cwtex-kai",
		"fonts-cwtex-ming",
		"fonts-cwtex-yen",
		"fonts-dancingscript",
		"fonts-ddc-uchen",
		"fonts-dejavu",
		"fonts-dejavu-core",
		"fonts-dejavu-extra",
		"fonts-dejavu-mono",
		"fonts-dejavu-web",
		"fonts-dejima-mincho",
		"fonts-denemo",
		"fonts-deva",
		"fonts-deva-extra",
		"fonts-dkg-handwriting",
		"fonts-dm-mono",
		"fonts-dosis",
		"fonts-dotgothic16",
		"fonts-droid-fallback",
		"fonts-dseg",
		"fonts-dustin",
		"fonts-dzongkha",
		"fonts-ebgaramond",
		"fonts-ebgaramond-extra",
		"fonts-ecolier-court",
		"fonts-ecolier-lignes-court",
		"fonts-eeyek",
		"fonts-elstob",
		"fonts-elusive-icons",
		"fonts-emojione",
		"fonts-engadget",
		"fonts-entypo",
		"fonts-essays1743",
		"fonts-eurofurence",
		"fonts-evertype-conakry",
		"fonts-f500",
		"fonts-fantasma",
		"fonts-fantasque-sans",
		"fonts-fanwood",
		"fonts-farsiweb",
		"fonts-femkeklaver",
		"fonts-ferrite-core",
		"fonts-firacode",
		"fonts-font-awesome",
		"fonts-fork-awesome",
		"fonts-freefarsi",
		"fonts-freefont-otf",
		"fonts-freefont-ttf",
		"fonts-gamaliel",
		"fonts-gargi",
		"fonts-gemunu-libre",
		"fonts-georgewilliams",
		"fonts-gfs-artemisia",
		"fonts-gfs-baskerville",
		"fonts-gfs-bodoni-classic",
		"fonts-gfs-complutum",
		"fonts-gfs-didot",
		"fonts-gfs-didot-classic",
		"fonts-gfs-gazis",
		"fonts-gfs-neohellenic",
		"fonts-gfs-olga",
		"fonts-gfs-porson",
		"fonts-gfs-solomos",
		"fonts-gfs-theokritos",
		"fonts-glasstty",
		"fonts-glyphicons-halflings",
		"fonts-gnutypewriter",
		"fonts-go",
		"fonts-gotico-antiqua",
		"fonts-goudybookletter",
		"fonts-gubbi",
		"fonts-gujr",
		"fonts-gujr-extra",
		"fonts-guru",
		"fonts-guru-extra",
		"fonts-hack",
		"fonts-hack-otf",
		"fonts-hack-ttf",
		"fonts-hack-web",
		"fonts-hanazono",
		"fonts-havana",
		"fonts-hermit",
		"fonts-horai-umefont",
		"fonts-hosny-amiri",
		"fonts-hosny-thabit",
		"fonts-humor-sans",
		"fonts-ibm-plex",
		"fonts-inconsolata",
		"fonts-indic",
		"fonts-inter",
		"fonts-inter-variable",
		"fonts-ipaexfont",
		"fonts-ipaexfont-gothic",
		"fonts-ipaexfont-mincho",
		"fonts-ipafont",
		"fonts-ipafont-gothic",
		"fonts-ipafont-mincho",
		"fonts-ipafont-nonfree-jisx0208",
		"fonts-ipafont-nonfree-uigothic",
		"fonts-ipamj-mincho",
		"fonts-ir",
		"fonts-irannastaliq",
		"fonts-isabella",
		"fonts-jetbrains-mono",
		"fonts-jetbrains-mono-web",
		"fonts-johnsmith-induni",
		"fonts-joscelyn",
		"fonts-jsmath",
		"fonts-junction",
		"fonts-junicode",
		"fonts-jura",
		"fonts-kacst",
		"fonts-kacst-one",
		"fonts-kalapi",
		"fonts-kanjistrokeorders",
		"fonts-karla",
		"fonts-karmilla",
		"fonts-katex",
		"fonts-kaushanscript",
		"fonts-khmeros",
		"fonts-khmeros-core",
		"fonts-kiloji",
		"fonts-klaudia-berenika",
		"fonts-klee",
		"fonts-knda",
		"fonts-kode-mono",
		"fonts-komatuna",
		"fonts-konatu",
		"fonts-kouzan-mouhitsu",
		"fonts-kristi",
		"fonts-lao",
		"fonts-larabie-deco",
		"fonts-larabie-straight",
		"fonts-larabie-uncommon",
		"fonts-lato",
		"fonts-ldco",
		"fonts-le-murmure",
		"fonts-league-mono",
		"fonts-league-spartan",
		"fonts-leckerli-one",
		"fonts-lemonada",
		"fonts-levien-museum",
		"fonts-levien-typoscript",
		"fonts-lexi-gulim",
		"fonts-lexi-saebom",
		"fonts-lg-aboriginal",
		"fonts-liberation",
		"fonts-liberation-sans-narrow",
		"fonts-liberation2",
		"fonts-libfinal",
		"fonts-lindenhill",
		"fonts-linex",
		"fonts-linuxlibertine",
		"fonts-lklug-sinhala",
		"fonts-lmodern",
		"fonts-lobster",
		"fonts-lobstertwo",
		"fonts-lohit-beng-assamese",
		"fonts-lohit-beng-bengali",
		"fonts-lohit-deva",
		"fonts-lohit-deva-marathi",
		"fonts-lohit-deva-nepali",
		"fonts-lohit-gujr",
		"fonts-lohit-guru",
		"fonts-lohit-knda",
		"fonts-lohit-mlym",
		"fonts-lohit-orya",
		"fonts-lohit-taml",
		"fonts-lohit-taml-classical",
		"fonts-lohit-telu",
		"fonts-lxgw-wenkai",
		"fonts-lxgw-wenkai-doc",
		"fonts-lyx",
		"fonts-manchufont",
		"fonts-manrope",
		"fonts-material-design-icons-iconfont",
		"fonts-materialdesignicons-webfont",
		"fonts-mathjax",
		"fonts-mathjax-extras",
		"fonts-meera-inimai",
		"fonts-meera-taml",
		"fonts-migmix",
		"fonts-mikachan",
		"fonts-millimetre",
		"fonts-misaki",
		"fonts-mlym",
		"fonts-mmcedar",
		"fonts-moe-standard-kai",
		"fonts-moe-standard-song",
		"fonts-mona",
		"fonts-monapo",
		"fonts-monlam",
		"fonts-monofur",
		"fonts-monoid",
		"fonts-monoid-halfloose",
		"fonts-monoid-halftight",
		"fonts-monoid-loose",
		"fonts-monoid-tight",
		"fonts-mononoki",
		"fonts-montserrat",
		"fonts-morisawa-bizud-gothic",
		"fonts-morisawa-bizud-mincho",
		"fonts-motoya-l-cedar",
		"fonts-motoya-l-maruberi",
		"fonts-mph-2b-damase",
		"fonts-mplus",
		"fonts-myanmar",
		"fonts-nafees",
		"fonts-nakula",
		"fonts-nanum",
		"fonts-nanum-coding",
		"fonts-nanum-eco",
		"fonts-nanum-extra",
		"fonts-national-park",
		"fonts-naver-d2coding",
		"fonts-navilu",
		"fonts-noto",
		"fonts-noto-cjk",
		"fonts-noto-cjk-extra",
		"fonts-noto-color-emoji",
		"fonts-noto-core",
		"fonts-noto-extra",
		"fonts-noto-hinted",
		"fonts-noto-mono",
		"fonts-noto-ui-core",
		"fonts-noto-ui-extra",
		"fonts-noto-unhinted",
		"fonts-ocr-a",
		"fonts-ocr-b",
		"fonts-octicons",
		"fonts-oflb-asana-math",
		"fonts-oflb-euterpe",
		"fonts-okolaks",
		"fonts-oldstandard",
		"fonts-open-sans",
		"fonts-opendin",
		"fonts-opendyslexic",
		"fonts-opensymbol",
		"fonts-oradano-mincho-gsrr",
		"fonts-orya",
		"fonts-orya-extra",
		"fonts-osifont",
		"fonts-oxygen",
		"fonts-pagul",
		"fonts-paktype",
		"fonts-paratype",
		"fonts-pc",
		"fonts-pc-extra",
		"fonts-play",
		"fonts-povray",
		"fonts-powerline",
		"fonts-prociono",
		"fonts-proggy",
		"fonts-quattrocento",
		"fonts-quicksand",
		"fonts-radisnoir",
		"fonts-rampart",
		"fonts-recommended",
		"fonts-reggae",
		"fonts-ricty-diminished",
		"fonts-rit-sundar",
		"fonts-roadgeek",
		"fonts-roboto",
		"fonts-roboto-fontface",
		"fonts-roboto-hinted",
		"fonts-roboto-slab",
		"fonts-roboto-unhinted",
		"fonts-rocknroll",
		"fonts-routed-gothic",
		"fonts-rufscript",
		"fonts-sahadeva",
		"fonts-sahel",
		"fonts-sahel-variable",
		"fonts-sambhota-tsugring",
		"fonts-sambhota-yigchung",
		"fonts-samyak",
		"fonts-samyak-deva",
		"fonts-samyak-gujr",
		"fonts-samyak-mlym",
		"fonts-samyak-orya",
		"fonts-samyak-taml",
		"fonts-sarai",
		"fonts-sawarabi-gothic",
		"fonts-sawarabi-mincho",
		"fonts-senamirmir-washra",
		"fonts-seto",
		"fonts-sil-abyssinica",
		"fonts-sil-akatab",
		"fonts-sil-alkalami",
		"fonts-sil-andika",
		"fonts-sil-andika-compact",
		"fonts-sil-andikanewbasic",
		"fonts-sil-annapurna",
		"fonts-sil-awami-nastaliq",
		"fonts-sil-charis",
		"fonts-sil-charis-compact",
		"fonts-sil-dai-banna",
		"fonts-sil-doulos",
		"fonts-sil-doulos-compact",
		"fonts-sil-ezra",
		"fonts-sil-galatia",
		"fonts-sil-gentium",
		"fonts-sil-gentium-basic",
		"fonts-sil-gentiumplus",
		"fonts-sil-gentiumplus-compact",
		"fonts-sil-harmattan",
		"fonts-sil-lateef",
		"fonts-sil-mingzat",
		"fonts-sil-mondulkiri",
		"fonts-sil-mondulkiri-extra",
		"fonts-sil-nuosusil",
		"fonts-sil-padauk",
		"fonts-sil-scheherazade",
		"fonts-sil-shimenkan",
		"fonts-sil-shimenkan-gsm",
		"fonts-sil-shimenkan-guifan",
		"fonts-sil-shimenkan-mas",
		"fonts-sil-shimenkan-mgs",
		"fonts-sil-shimenkan-salaowu",
		"fonts-sil-shimenkan-sapushan",
		"fonts-sil-shimenkan-taogu",
		"fonts-sil-shimenkan-zonghe",
		"fonts-sil-sophia-nubian",
		"fonts-sil-tagmukay",
		"fonts-sil-taiheritagepro",
		"fonts-sil-zaghawa-beria",
		"fonts-sixtyfour",
		"fonts-sjfonts",
		"fonts-smc",
		"fonts-smc-anjalioldlipi",
		"fonts-smc-chilanka",
		"fonts-smc-dyuthi",
		"fonts-smc-gayathri",
		"fonts-smc-karumbi",
		"fonts-smc-keraleeyam",
		"fonts-smc-manjari",
		"fonts-smc-meera",
		"fonts-smc-rachana",
		"fonts-smc-raghumalayalamsans",
		"fonts-smc-suruma",
		"fonts-smc-uroob",
		"fonts-smiley-sans",
		"fonts-solide-mirage",
		"fonts-sora",
		"fonts-space-grotesk",
		"fonts-space-grotesk-otf",
		"fonts-space-grotesk-ttf",
		"fonts-spleen",
		"fonts-staypuft",
		"fonts-stick",
		"fonts-stix",
		"fonts-summersby",
		"fonts-symbola",
		"fonts-tagbanwa",
		"fonts-takao",
		"fonts-takao-gothic",
		"fonts-takao-mincho",
		"fonts-takao-pgothic",
		"fonts-taml",
		"fonts-taml-tamu",
		"fonts-taml-tscu",
		"fonts-telu",
		"fonts-telu-extra",
		"fonts-teluguvijayam",
		"fonts-terminus",
		"fonts-terminus-otb",
		"fonts-texgyre",
		"fonts-texgyre-math",
		"fonts-thai-tlwg",
		"fonts-thai-tlwg-otf",
		"fonts-thai-tlwg-ttf",
		"fonts-thai-tlwg-web",
		"fonts-tibetan-machine",
		"fonts-tiresias",
		"fonts-tlwg-garuda",
		"fonts-tlwg-garuda-otf",
		"fonts-tlwg-garuda-ttf",
		"fonts-tlwg-kinnari",
		"fonts-tlwg-kinnari-otf",
		"fonts-tlwg-kinnari-ttf",
		"fonts-tlwg-laksaman",
		"fonts-tlwg-laksaman-otf",
		"fonts-tlwg-laksaman-ttf",
		"fonts-tlwg-loma",
		"fonts-tlwg-loma-otf",
		"fonts-tlwg-loma-ttf",
		"fonts-tlwg-mono",
		"fonts-tlwg-mono-otf",
		"fonts-tlwg-mono-ttf",
		"fonts-tlwg-norasi",
		"fonts-tlwg-norasi-otf",
		"fonts-tlwg-norasi-ttf",
		"fonts-tlwg-purisa",
		"fonts-tlwg-purisa-otf",
		"fonts-tlwg-purisa-ttf",
		"fonts-tlwg-sawasdee",
		"fonts-tlwg-sawasdee-otf",
		"fonts-tlwg-sawasdee-ttf",
		"fonts-tlwg-typewriter",
		"fonts-tlwg-typewriter-otf",
		"fonts-tlwg-typewriter-ttf",
		"fonts-tlwg-typist",
		"fonts-tlwg-typist-otf",
		"fonts-tlwg-typist-ttf",
		"fonts-tlwg-typo",
		"fonts-tlwg-typo-otf",
		"fonts-tlwg-typo-ttf",
		"fonts-tlwg-umpush",
		"fonts-tlwg-umpush-otf",
		"fonts-tlwg-umpush-ttf",
		"fonts-tlwg-waree",
		"fonts-tlwg-waree-otf",
		"fonts-tlwg-waree-ttf",
		"fonts-tomsontalks",
		"fonts-train",
		"fonts-triod-postnaja",
		"fonts-tt2020",
		"fonts-tuffy",
		"fonts-ubuntu",
		"fonts-ubuntu-console",
		"fonts-ubuntu-title",
		"fonts-ukij-uyghur",
		"fonts-umeplus",
		"fonts-umeplus-cl",
		"fonts-unfonts-core",
		"fonts-unfonts-extra",
		"fonts-unifont",
		"fonts-unikurdweb",
		"fonts-uniol",
		"fonts-uralic",
		"fonts-urw-base35",
		"fonts-vazirmatn",
		"fonts-vlgothic",
		"fonts-vollkorn",
		"fonts-wine",
		"fonts-woowa-bm",
		"fonts-wqy-microhei",
		"fonts-wqy-zenhei",
		"fonts-xfree86-nonfree",
		"fonts-xfree86-nonfree-syriac",
		"fonts-yanone-kaffeesatz",
		"fonts-yas",
		"fonts-yozvox-yozfont",
		"fonts-yozvox-yozfont-antique",
		"fonts-yozvox-yozfont-cute",
		"fonts-yozvox-yozfont-edu",
		"fonts-yozvox-yozfont-new-kana",
		"fonts-yozvox-yozfont-standard-kana",
		"fonts-yrsa-rasa",
		"fonts-yusei-magic",
	}
	args := append([]string{"install", "-y"}, packages...)
	if err := d.cmd.Exec("apt-get", args...); err != nil {
		infra.GetLogger().Error(err)
		infra.GetLogger().Named(infra.StrInstaller).Infow("❌️  failed", "package", "fonts")
		return
	}
	infra.GetLogger().Named(infra.StrInstaller).Infow("✅️  completed", "package", "fonts")
}
