// Code generated by MockGen. DO NOT EDIT.
// Source: cache/group_cache.go

// Package mocks is a generated GoMock package.
package cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockGroupCache is a mock of GroupCache interface.
type MockGroupCache struct {
	ctrl     *gomock.Controller
	recorder *MockGroupCacheMockRecorder
}

// MockGroupCacheMockRecorder is the mock recorder for MockGroupCache.
type MockGroupCacheMockRecorder struct {
	mock *MockGroupCache
}

// NewMockGroupCache creates a new mock instance.
func NewMockGroupCache(ctrl *gomock.Controller) *MockGroupCache {
	mock := &MockGroupCache{ctrl: ctrl}
	mock.recorder = &MockGroupCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupCache) EXPECT() *MockGroupCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockGroupCache) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupCacheMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupCache)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockGroupCache) Get(id string) (model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGroupCacheMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGroupCache)(nil).Get), id)
}

// Refresh mocks base method.
func (m *MockGroupCache) Refresh(id string) (model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", id)
	ret0, _ := ret[0].(model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockGroupCacheMockRecorder) Refresh(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockGroupCache)(nil).Refresh), id)
}

// Set mocks base method.
func (m *MockGroupCache) Set(workspace model.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockGroupCacheMockRecorder) Set(workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGroupCache)(nil).Set), workspace)
}
