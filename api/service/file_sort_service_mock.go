// Code generated by MockGen. DO NOT EDIT.
// Source: service/file_sort_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockFileSortService is a mock of FileSortService interface.
type MockFileSortService struct {
	ctrl     *gomock.Controller
	recorder *MockFileSortServiceMockRecorder
}

// MockFileSortServiceMockRecorder is the mock recorder for MockFileSortService.
type MockFileSortServiceMockRecorder struct {
	mock *MockFileSortService
}

// NewMockFileSortService creates a new mock instance.
func NewMockFileSortService(ctrl *gomock.Controller) *MockFileSortService {
	mock := &MockFileSortService{ctrl: ctrl}
	mock.recorder = &MockFileSortServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSortService) EXPECT() *MockFileSortServiceMockRecorder {
	return m.recorder
}

// Sort mocks base method.
func (m *MockFileSortService) Sort(data []model.File, sortBy, sortOrder, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", data, sortBy, sortOrder, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// Sort indicates an expected call of Sort.
func (mr *MockFileSortServiceMockRecorder) Sort(data, sortBy, sortOrder, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockFileSortService)(nil).Sort), data, sortBy, sortOrder, userID)
}

// SortByDateCreated mocks base method.
func (m *MockFileSortService) SortByDateCreated(data []model.File, sortOrder string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortByDateCreated", data, sortOrder)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// SortByDateCreated indicates an expected call of SortByDateCreated.
func (mr *MockFileSortServiceMockRecorder) SortByDateCreated(data, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortByDateCreated", reflect.TypeOf((*MockFileSortService)(nil).SortByDateCreated), data, sortOrder)
}

// SortByDateModified mocks base method.
func (m *MockFileSortService) SortByDateModified(data []model.File, sortOrder string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortByDateModified", data, sortOrder)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// SortByDateModified indicates an expected call of SortByDateModified.
func (mr *MockFileSortServiceMockRecorder) SortByDateModified(data, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortByDateModified", reflect.TypeOf((*MockFileSortService)(nil).SortByDateModified), data, sortOrder)
}

// SortByKind mocks base method.
func (m *MockFileSortService) SortByKind(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortByKind", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// SortByKind indicates an expected call of SortByKind.
func (mr *MockFileSortServiceMockRecorder) SortByKind(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortByKind", reflect.TypeOf((*MockFileSortService)(nil).SortByKind), data, userID)
}

// SortBySize mocks base method.
func (m *MockFileSortService) SortBySize(data []model.File, sortOrder, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortBySize", data, sortOrder, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// SortBySize indicates an expected call of SortBySize.
func (mr *MockFileSortServiceMockRecorder) SortBySize(data, sortOrder, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortBySize", reflect.TypeOf((*MockFileSortService)(nil).SortBySize), data, sortOrder, userID)
}
