// Code generated by MockGen. DO NOT EDIT.
// Source: service/file_sort_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockFileSortService is a mock of FileSortService interface.
type MockFileSortService struct {
	ctrl     *gomock.Controller
	recorder *MockFileSortServiceMockRecorder
}

// MockFileSortServiceMockRecorder is the mock recorder for MockFileSortService.
type MockFileSortServiceMockRecorder struct {
	mock *MockFileSortService
}

// NewMockFileSortService creates a new mock instance.
func NewMockFileSortService(ctrl *gomock.Controller) *MockFileSortService {
	mock := &MockFileSortService{ctrl: ctrl}
	mock.recorder = &MockFileSortServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSortService) EXPECT() *MockFileSortServiceMockRecorder {
	return m.recorder
}

// sort mocks base method.
func (m *MockFileSortService) sort(data []model.File, sortBy, sortOrder, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sort", data, sortBy, sortOrder, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// sort indicates an expected call of sort.
func (mr *MockFileSortServiceMockRecorder) sort(data, sortBy, sortOrder, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sort", reflect.TypeOf((*MockFileSortService)(nil).sort), data, sortBy, sortOrder, userID)
}

// sortByDateCreated mocks base method.
func (m *MockFileSortService) sortByDateCreated(data []model.File, sortOrder string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sortByDateCreated", data, sortOrder)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// sortByDateCreated indicates an expected call of sortByDateCreated.
func (mr *MockFileSortServiceMockRecorder) sortByDateCreated(data, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sortByDateCreated", reflect.TypeOf((*MockFileSortService)(nil).sortByDateCreated), data, sortOrder)
}

// sortByDateModified mocks base method.
func (m *MockFileSortService) sortByDateModified(data []model.File, sortOrder string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sortByDateModified", data, sortOrder)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// sortByDateModified indicates an expected call of sortByDateModified.
func (mr *MockFileSortServiceMockRecorder) sortByDateModified(data, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sortByDateModified", reflect.TypeOf((*MockFileSortService)(nil).sortByDateModified), data, sortOrder)
}

// sortByKind mocks base method.
func (m *MockFileSortService) sortByKind(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sortByKind", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// sortByKind indicates an expected call of sortByKind.
func (mr *MockFileSortServiceMockRecorder) sortByKind(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sortByKind", reflect.TypeOf((*MockFileSortService)(nil).sortByKind), data, userID)
}

// sortByName mocks base method.
func (m *MockFileSortService) sortByName(data []model.File, sortOrder string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sortByName", data, sortOrder)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// sortByName indicates an expected call of sortByName.
func (mr *MockFileSortServiceMockRecorder) sortByName(data, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sortByName", reflect.TypeOf((*MockFileSortService)(nil).sortByName), data, sortOrder)
}

// sortBySize mocks base method.
func (m *MockFileSortService) sortBySize(data []model.File, sortOrder, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sortBySize", data, sortOrder, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// sortBySize indicates an expected call of sortBySize.
func (mr *MockFileSortServiceMockRecorder) sortBySize(data, sortOrder, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sortBySize", reflect.TypeOf((*MockFileSortService)(nil).sortBySize), data, sortOrder, userID)
}
