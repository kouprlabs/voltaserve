// Code generated by MockGen. DO NOT EDIT.
// Source: service/file_filter_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockFileFilterService is a mock of FileFilterService interface.
type MockFileFilterService struct {
	ctrl     *gomock.Controller
	recorder *MockFileFilterServiceMockRecorder
}

// MockFileFilterServiceMockRecorder is the mock recorder for MockFileFilterService.
type MockFileFilterServiceMockRecorder struct {
	mock *MockFileFilterService
}

// NewMockFileFilterService creates a new mock instance.
func NewMockFileFilterService(ctrl *gomock.Controller) *MockFileFilterService {
	mock := &MockFileFilterService{ctrl: ctrl}
	mock.recorder = &MockFileFilterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileFilterService) EXPECT() *MockFileFilterServiceMockRecorder {
	return m.recorder
}

// filterDocuments mocks base method.
func (m *MockFileFilterService) filterDocuments(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filterDocuments", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// filterDocuments indicates an expected call of filterDocuments.
func (mr *MockFileFilterServiceMockRecorder) filterDocuments(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterDocuments", reflect.TypeOf((*MockFileFilterService)(nil).filterDocuments), data, userID)
}

// filterFiles mocks base method.
func (m *MockFileFilterService) filterFiles(data []model.File) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filterFiles", data)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// filterFiles indicates an expected call of filterFiles.
func (mr *MockFileFilterServiceMockRecorder) filterFiles(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterFiles", reflect.TypeOf((*MockFileFilterService)(nil).filterFiles), data)
}

// filterFolders mocks base method.
func (m *MockFileFilterService) filterFolders(data []model.File) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filterFolders", data)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// filterFolders indicates an expected call of filterFolders.
func (mr *MockFileFilterServiceMockRecorder) filterFolders(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterFolders", reflect.TypeOf((*MockFileFilterService)(nil).filterFolders), data)
}

// filterImages mocks base method.
func (m *MockFileFilterService) filterImages(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filterImages", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// filterImages indicates an expected call of filterImages.
func (mr *MockFileFilterServiceMockRecorder) filterImages(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterImages", reflect.TypeOf((*MockFileFilterService)(nil).filterImages), data, userID)
}

// filterOthers mocks base method.
func (m *MockFileFilterService) filterOthers(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filterOthers", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// filterOthers indicates an expected call of filterOthers.
func (mr *MockFileFilterServiceMockRecorder) filterOthers(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterOthers", reflect.TypeOf((*MockFileFilterService)(nil).filterOthers), data, userID)
}

// filterPDFs mocks base method.
func (m *MockFileFilterService) filterPDFs(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filterPDFs", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// filterPDFs indicates an expected call of filterPDFs.
func (mr *MockFileFilterServiceMockRecorder) filterPDFs(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterPDFs", reflect.TypeOf((*MockFileFilterService)(nil).filterPDFs), data, userID)
}

// filterTexts mocks base method.
func (m *MockFileFilterService) filterTexts(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filterTexts", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// filterTexts indicates an expected call of filterTexts.
func (mr *MockFileFilterServiceMockRecorder) filterTexts(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterTexts", reflect.TypeOf((*MockFileFilterService)(nil).filterTexts), data, userID)
}

// filterVideos mocks base method.
func (m *MockFileFilterService) filterVideos(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filterVideos", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// filterVideos indicates an expected call of filterVideos.
func (mr *MockFileFilterServiceMockRecorder) filterVideos(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterVideos", reflect.TypeOf((*MockFileFilterService)(nil).filterVideos), data, userID)
}

// filterWithQuery mocks base method.
func (m *MockFileFilterService) filterWithQuery(data []model.File, opts FileQuery, parent model.File) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "filterWithQuery", data, opts, parent)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// filterWithQuery indicates an expected call of filterWithQuery.
func (mr *MockFileFilterServiceMockRecorder) filterWithQuery(data, opts, parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "filterWithQuery", reflect.TypeOf((*MockFileFilterService)(nil).filterWithQuery), data, opts, parent)
}
