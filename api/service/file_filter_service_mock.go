// Code generated by MockGen. DO NOT EDIT.
// Source: service/file_filter_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockFileFilterService is a mock of FileFilterService interface.
type MockFileFilterService struct {
	ctrl     *gomock.Controller
	recorder *MockFileFilterServiceMockRecorder
}

// MockFileFilterServiceMockRecorder is the mock recorder for MockFileFilterService.
type MockFileFilterServiceMockRecorder struct {
	mock *MockFileFilterService
}

// NewMockFileFilterService creates a new mock instance.
func NewMockFileFilterService(ctrl *gomock.Controller) *MockFileFilterService {
	mock := &MockFileFilterService{ctrl: ctrl}
	mock.recorder = &MockFileFilterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileFilterService) EXPECT() *MockFileFilterServiceMockRecorder {
	return m.recorder
}

// FilterDocuments mocks base method.
func (m *MockFileFilterService) FilterDocuments(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterDocuments", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// FilterDocuments indicates an expected call of FilterDocuments.
func (mr *MockFileFilterServiceMockRecorder) FilterDocuments(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterDocuments", reflect.TypeOf((*MockFileFilterService)(nil).FilterDocuments), data, userID)
}

// FilterFiles mocks base method.
func (m *MockFileFilterService) FilterFiles(data []model.File) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterFiles", data)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// FilterFiles indicates an expected call of FilterFiles.
func (mr *MockFileFilterServiceMockRecorder) FilterFiles(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterFiles", reflect.TypeOf((*MockFileFilterService)(nil).FilterFiles), data)
}

// FilterFolders mocks base method.
func (m *MockFileFilterService) FilterFolders(data []model.File) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterFolders", data)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// FilterFolders indicates an expected call of FilterFolders.
func (mr *MockFileFilterServiceMockRecorder) FilterFolders(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterFolders", reflect.TypeOf((*MockFileFilterService)(nil).FilterFolders), data)
}

// FilterImages mocks base method.
func (m *MockFileFilterService) FilterImages(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterImages", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// FilterImages indicates an expected call of FilterImages.
func (mr *MockFileFilterServiceMockRecorder) FilterImages(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterImages", reflect.TypeOf((*MockFileFilterService)(nil).FilterImages), data, userID)
}

// FilterOthers mocks base method.
func (m *MockFileFilterService) FilterOthers(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOthers", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// FilterOthers indicates an expected call of FilterOthers.
func (mr *MockFileFilterServiceMockRecorder) FilterOthers(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOthers", reflect.TypeOf((*MockFileFilterService)(nil).FilterOthers), data, userID)
}

// FilterPDFs mocks base method.
func (m *MockFileFilterService) FilterPDFs(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterPDFs", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// FilterPDFs indicates an expected call of FilterPDFs.
func (mr *MockFileFilterServiceMockRecorder) FilterPDFs(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterPDFs", reflect.TypeOf((*MockFileFilterService)(nil).FilterPDFs), data, userID)
}

// FilterTexts mocks base method.
func (m *MockFileFilterService) FilterTexts(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTexts", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// FilterTexts indicates an expected call of FilterTexts.
func (mr *MockFileFilterServiceMockRecorder) FilterTexts(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTexts", reflect.TypeOf((*MockFileFilterService)(nil).FilterTexts), data, userID)
}

// FilterVideos mocks base method.
func (m *MockFileFilterService) FilterVideos(data []model.File, userID string) []model.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterVideos", data, userID)
	ret0, _ := ret[0].([]model.File)
	return ret0
}

// FilterVideos indicates an expected call of FilterVideos.
func (mr *MockFileFilterServiceMockRecorder) FilterVideos(data, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterVideos", reflect.TypeOf((*MockFileFilterService)(nil).FilterVideos), data, userID)
}

// FilterWithQuery mocks base method.
func (m *MockFileFilterService) FilterWithQuery(data []model.File, opts FileQuery, parent model.File) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterWithQuery", data, opts, parent)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterWithQuery indicates an expected call of FilterWithQuery.
func (mr *MockFileFilterServiceMockRecorder) FilterWithQuery(data, opts, parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterWithQuery", reflect.TypeOf((*MockFileFilterService)(nil).FilterWithQuery), data, opts, parent)
}
