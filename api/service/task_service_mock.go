// Code generated by MockGen. DO NOT EDIT.
// Source: service/task_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
	repo "github.com/kouprlabs/voltaserve/api/repo"
)

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockTaskService) Count(userID string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", userID)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockTaskServiceMockRecorder) Count(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockTaskService)(nil).Count), userID)
}

// Create mocks base method.
func (m *MockTaskService) Create(opts TaskCreateOptions) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", opts)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskServiceMockRecorder) Create(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskService)(nil).Create), opts)
}

// Delete mocks base method.
func (m *MockTaskService) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskService)(nil).Delete), id)
}

// Dismiss mocks base method.
func (m *MockTaskService) Dismiss(id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dismiss", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dismiss indicates an expected call of Dismiss.
func (mr *MockTaskServiceMockRecorder) Dismiss(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dismiss", reflect.TypeOf((*MockTaskService)(nil).Dismiss), id, userID)
}

// DismissAll mocks base method.
func (m *MockTaskService) DismissAll(userID string) (*TaskDismissAllResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DismissAll", userID)
	ret0, _ := ret[0].(*TaskDismissAllResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DismissAll indicates an expected call of DismissAll.
func (mr *MockTaskServiceMockRecorder) DismissAll(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissAll", reflect.TypeOf((*MockTaskService)(nil).DismissAll), userID)
}

// Find mocks base method.
func (m *MockTaskService) Find(id, userID string) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id, userID)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockTaskServiceMockRecorder) Find(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTaskService)(nil).Find), id, userID)
}

// List mocks base method.
func (m *MockTaskService) List(opts TaskListOptions, userID string) (*TaskList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts, userID)
	ret0, _ := ret[0].(*TaskList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTaskServiceMockRecorder) List(opts, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTaskService)(nil).List), opts, userID)
}

// Patch mocks base method.
func (m *MockTaskService) Patch(id string, opts TaskPatchOptions) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", id, opts)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockTaskServiceMockRecorder) Patch(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockTaskService)(nil).Patch), id, opts)
}

// Probe mocks base method.
func (m *MockTaskService) Probe(opts TaskListOptions, userID string) (*TaskProbe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Probe", opts, userID)
	ret0, _ := ret[0].(*TaskProbe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Probe indicates an expected call of Probe.
func (mr *MockTaskServiceMockRecorder) Probe(opts, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Probe", reflect.TypeOf((*MockTaskService)(nil).Probe), opts, userID)
}

// deleteAndSync mocks base method.
func (m *MockTaskService) deleteAndSync(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteAndSync", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteAndSync indicates an expected call of deleteAndSync.
func (mr *MockTaskServiceMockRecorder) deleteAndSync(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteAndSync", reflect.TypeOf((*MockTaskService)(nil).deleteAndSync), id)
}

// insertAndSync mocks base method.
func (m *MockTaskService) insertAndSync(opts repo.TaskInsertOptions) (model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "insertAndSync", opts)
	ret0, _ := ret[0].(model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// insertAndSync indicates an expected call of insertAndSync.
func (mr *MockTaskServiceMockRecorder) insertAndSync(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "insertAndSync", reflect.TypeOf((*MockTaskService)(nil).insertAndSync), opts)
}

// saveAndSync mocks base method.
func (m *MockTaskService) saveAndSync(task model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "saveAndSync", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// saveAndSync indicates an expected call of saveAndSync.
func (mr *MockTaskServiceMockRecorder) saveAndSync(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveAndSync", reflect.TypeOf((*MockTaskService)(nil).saveAndSync), task)
}
