// Code generated by MockGen. DO NOT EDIT.
// Source: service/file_core_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockFileCoreService is a mock of FileCoreService interface.
type MockFileCoreService struct {
	ctrl     *gomock.Controller
	recorder *MockFileCoreServiceMockRecorder
}

// MockFileCoreServiceMockRecorder is the mock recorder for MockFileCoreService.
type MockFileCoreServiceMockRecorder struct {
	mock *MockFileCoreService
}

// NewMockFileCoreService creates a new mock instance.
func NewMockFileCoreService(ctrl *gomock.Controller) *MockFileCoreService {
	mock := &MockFileCoreService{ctrl: ctrl}
	mock.recorder = &MockFileCoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileCoreService) EXPECT() *MockFileCoreServiceMockRecorder {
	return m.recorder
}

// authorize mocks base method.
func (m *MockFileCoreService) authorize(userID string, files []model.File, permission string) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "authorize", userID, files, permission)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// authorize indicates an expected call of authorize.
func (mr *MockFileCoreServiceMockRecorder) authorize(userID, files, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "authorize", reflect.TypeOf((*MockFileCoreService)(nil).authorize), userID, files, permission)
}

// authorizeIDs mocks base method.
func (m *MockFileCoreService) authorizeIDs(userID string, ids []string, permission string) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "authorizeIDs", userID, ids, permission)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// authorizeIDs indicates an expected call of authorizeIDs.
func (mr *MockFileCoreServiceMockRecorder) authorizeIDs(userID, ids, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "authorizeIDs", reflect.TypeOf((*MockFileCoreService)(nil).authorizeIDs), userID, ids, permission)
}

// getChildWithName mocks base method.
func (m *MockFileCoreService) getChildWithName(id, name string) (model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getChildWithName", id, name)
	ret0, _ := ret[0].(model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getChildWithName indicates an expected call of getChildWithName.
func (mr *MockFileCoreServiceMockRecorder) getChildWithName(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getChildWithName", reflect.TypeOf((*MockFileCoreService)(nil).getChildWithName), id, name)
}

// saveAndSync mocks base method.
func (m *MockFileCoreService) saveAndSync(file model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "saveAndSync", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// saveAndSync indicates an expected call of saveAndSync.
func (mr *MockFileCoreServiceMockRecorder) saveAndSync(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveAndSync", reflect.TypeOf((*MockFileCoreService)(nil).saveAndSync), file)
}

// sync mocks base method.
func (m *MockFileCoreService) sync(file model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sync", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// sync indicates an expected call of sync.
func (mr *MockFileCoreServiceMockRecorder) sync(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sync", reflect.TypeOf((*MockFileCoreService)(nil).sync), file)
}
