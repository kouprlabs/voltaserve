// Code generated by MockGen. DO NOT EDIT.
// Source: service/file_core_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockFileCoreService is a mock of FileCoreService interface.
type MockFileCoreService struct {
	ctrl     *gomock.Controller
	recorder *MockFileCoreServiceMockRecorder
}

// MockFileCoreServiceMockRecorder is the mock recorder for MockFileCoreService.
type MockFileCoreServiceMockRecorder struct {
	mock *MockFileCoreService
}

// NewMockFileCoreService creates a new mock instance.
func NewMockFileCoreService(ctrl *gomock.Controller) *MockFileCoreService {
	mock := &MockFileCoreService{ctrl: ctrl}
	mock.recorder = &MockFileCoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileCoreService) EXPECT() *MockFileCoreServiceMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockFileCoreService) Authorize(userID string, files []model.File, permission string) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", userID, files, permission)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockFileCoreServiceMockRecorder) Authorize(userID, files, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockFileCoreService)(nil).Authorize), userID, files, permission)
}

// AuthorizeIDs mocks base method.
func (m *MockFileCoreService) AuthorizeIDs(userID string, ids []string, permission string) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeIDs", userID, ids, permission)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeIDs indicates an expected call of AuthorizeIDs.
func (mr *MockFileCoreServiceMockRecorder) AuthorizeIDs(userID, ids, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeIDs", reflect.TypeOf((*MockFileCoreService)(nil).AuthorizeIDs), userID, ids, permission)
}

// GetChildWithName mocks base method.
func (m *MockFileCoreService) GetChildWithName(id, name string) (model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildWithName", id, name)
	ret0, _ := ret[0].(model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildWithName indicates an expected call of GetChildWithName.
func (mr *MockFileCoreServiceMockRecorder) GetChildWithName(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildWithName", reflect.TypeOf((*MockFileCoreService)(nil).GetChildWithName), id, name)
}

// SaveAndSync mocks base method.
func (m *MockFileCoreService) SaveAndSync(file model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAndSync", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAndSync indicates an expected call of SaveAndSync.
func (mr *MockFileCoreServiceMockRecorder) SaveAndSync(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAndSync", reflect.TypeOf((*MockFileCoreService)(nil).SaveAndSync), file)
}

// Sync mocks base method.
func (m *MockFileCoreService) Sync(file model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockFileCoreServiceMockRecorder) Sync(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockFileCoreService)(nil).Sync), file)
}
