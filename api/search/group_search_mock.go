// Code generated by MockGen. DO NOT EDIT.
// Source: search/group_search.go

// Package mocks is a generated GoMock package.
package search

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	infra "github.com/kouprlabs/voltaserve/api/infra"
	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockGroupSearch is a mock of GroupSearch interface.
type MockGroupSearch struct {
	ctrl     *gomock.Controller
	recorder *MockGroupSearchMockRecorder
}

// MockGroupSearchMockRecorder is the mock recorder for MockGroupSearch.
type MockGroupSearchMockRecorder struct {
	mock *MockGroupSearch
}

// NewMockGroupSearch creates a new mock instance.
func NewMockGroupSearch(ctrl *gomock.Controller) *MockGroupSearch {
	mock := &MockGroupSearch{ctrl: ctrl}
	mock.recorder = &MockGroupSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupSearch) EXPECT() *MockGroupSearchMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockGroupSearch) Delete(ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupSearchMockRecorder) Delete(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupSearch)(nil).Delete), ids)
}

// Index mocks base method.
func (m *MockGroupSearch) Index(groups []model.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", groups)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockGroupSearchMockRecorder) Index(groups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockGroupSearch)(nil).Index), groups)
}

// Query mocks base method.
func (m *MockGroupSearch) Query(query string, opts infra.QueryOptions) ([]model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query, opts)
	ret0, _ := ret[0].([]model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockGroupSearchMockRecorder) Query(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockGroupSearch)(nil).Query), query, opts)
}

// Update mocks base method.
func (m *MockGroupSearch) Update(groups []model.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", groups)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGroupSearchMockRecorder) Update(groups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroupSearch)(nil).Update), groups)
}
