// Code generated by MockGen. DO NOT EDIT.
// Source: search/organization_search.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	infra "github.com/kouprlabs/voltaserve/api/infra"
	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockOrganizationSearch is a mock of OrganizationSearch interface.
type MockOrganizationSearch struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationSearchMockRecorder
}

// MockOrganizationSearchMockRecorder is the mock recorder for MockOrganizationSearch.
type MockOrganizationSearchMockRecorder struct {
	mock *MockOrganizationSearch
}

// NewMockOrganizationSearch creates a new mock instance.
func NewMockOrganizationSearch(ctrl *gomock.Controller) *MockOrganizationSearch {
	mock := &MockOrganizationSearch{ctrl: ctrl}
	mock.recorder = &MockOrganizationSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationSearch) EXPECT() *MockOrganizationSearchMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockOrganizationSearch) Delete(ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrganizationSearchMockRecorder) Delete(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrganizationSearch)(nil).Delete), ids)
}

// Index mocks base method.
func (m *MockOrganizationSearch) Index(orgs []model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", orgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockOrganizationSearchMockRecorder) Index(orgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockOrganizationSearch)(nil).Index), orgs)
}

// Query mocks base method.
func (m *MockOrganizationSearch) Query(query string, opts infra.QueryOptions) ([]model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query, opts)
	ret0, _ := ret[0].([]model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockOrganizationSearchMockRecorder) Query(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockOrganizationSearch)(nil).Query), query, opts)
}

// Update mocks base method.
func (m *MockOrganizationSearch) Update(orgs []model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", orgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrganizationSearchMockRecorder) Update(orgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrganizationSearch)(nil).Update), orgs)
}
