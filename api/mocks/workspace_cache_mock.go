// Code generated by MockGen. DO NOT EDIT.
// Source: cache/workspace_cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockWorkspaceCache is a mock of WorkspaceCache interface.
type MockWorkspaceCache struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceCacheMockRecorder
}

// MockWorkspaceCacheMockRecorder is the mock recorder for MockWorkspaceCache.
type MockWorkspaceCacheMockRecorder struct {
	mock *MockWorkspaceCache
}

// NewMockWorkspaceCache creates a new mock instance.
func NewMockWorkspaceCache(ctrl *gomock.Controller) *MockWorkspaceCache {
	mock := &MockWorkspaceCache{ctrl: ctrl}
	mock.recorder = &MockWorkspaceCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceCache) EXPECT() *MockWorkspaceCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockWorkspaceCache) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWorkspaceCacheMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkspaceCache)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockWorkspaceCache) Get(id string) (model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWorkspaceCacheMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorkspaceCache)(nil).Get), id)
}

// Refresh mocks base method.
func (m *MockWorkspaceCache) Refresh(id string) (model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", id)
	ret0, _ := ret[0].(model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockWorkspaceCacheMockRecorder) Refresh(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockWorkspaceCache)(nil).Refresh), id)
}

// Set mocks base method.
func (m *MockWorkspaceCache) Set(workspace model.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockWorkspaceCacheMockRecorder) Set(workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockWorkspaceCache)(nil).Set), workspace)
}
