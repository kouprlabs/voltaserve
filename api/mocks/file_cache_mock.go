// Code generated by MockGen. DO NOT EDIT.
// Source: cache/file_cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockFileCache is a mock of FileCache interface.
type MockFileCache struct {
	ctrl     *gomock.Controller
	recorder *MockFileCacheMockRecorder
}

// MockFileCacheMockRecorder is the mock recorder for MockFileCache.
type MockFileCacheMockRecorder struct {
	mock *MockFileCache
}

// NewMockFileCache creates a new mock instance.
func NewMockFileCache(ctrl *gomock.Controller) *MockFileCache {
	mock := &MockFileCache{ctrl: ctrl}
	mock.recorder = &MockFileCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileCache) EXPECT() *MockFileCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFileCache) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileCacheMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileCache)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockFileCache) Get(id string) (model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileCacheMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileCache)(nil).Get), id)
}

// Refresh mocks base method.
func (m *MockFileCache) Refresh(id string) (model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", id)
	ret0, _ := ret[0].(model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockFileCacheMockRecorder) Refresh(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockFileCache)(nil).Refresh), id)
}

// RefreshWithExisting mocks base method.
func (m *MockFileCache) RefreshWithExisting(file model.File, userID string) (model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshWithExisting", file, userID)
	ret0, _ := ret[0].(model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshWithExisting indicates an expected call of RefreshWithExisting.
func (mr *MockFileCacheMockRecorder) RefreshWithExisting(file, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshWithExisting", reflect.TypeOf((*MockFileCache)(nil).RefreshWithExisting), file, userID)
}

// Set mocks base method.
func (m *MockFileCache) Set(file model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockFileCacheMockRecorder) Set(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockFileCache)(nil).Set), file)
}
