// Code generated by MockGen. DO NOT EDIT.
// Source: cache/snapshot_cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockSnapshotCache is a mock of SnapshotCache interface.
type MockSnapshotCache struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotCacheMockRecorder
}

// MockSnapshotCacheMockRecorder is the mock recorder for MockSnapshotCache.
type MockSnapshotCacheMockRecorder struct {
	mock *MockSnapshotCache
}

// NewMockSnapshotCache creates a new mock instance.
func NewMockSnapshotCache(ctrl *gomock.Controller) *MockSnapshotCache {
	mock := &MockSnapshotCache{ctrl: ctrl}
	mock.recorder = &MockSnapshotCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotCache) EXPECT() *MockSnapshotCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSnapshotCache) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSnapshotCacheMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSnapshotCache)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockSnapshotCache) Get(id string) (model.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(model.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSnapshotCacheMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSnapshotCache)(nil).Get), id)
}

// Refresh mocks base method.
func (m *MockSnapshotCache) Refresh(id string) (model.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", id)
	ret0, _ := ret[0].(model.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockSnapshotCacheMockRecorder) Refresh(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockSnapshotCache)(nil).Refresh), id)
}

// Set mocks base method.
func (m *MockSnapshotCache) Set(file model.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockSnapshotCacheMockRecorder) Set(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSnapshotCache)(nil).Set), file)
}
