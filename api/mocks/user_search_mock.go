// Code generated by MockGen. DO NOT EDIT.
// Source: search/user_search.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	infra "github.com/kouprlabs/voltaserve/api/infra"
	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockUserSearch is a mock of UserSearch interface.
type MockUserSearch struct {
	ctrl     *gomock.Controller
	recorder *MockUserSearchMockRecorder
}

// MockUserSearchMockRecorder is the mock recorder for MockUserSearch.
type MockUserSearchMockRecorder struct {
	mock *MockUserSearch
}

// NewMockUserSearch creates a new mock instance.
func NewMockUserSearch(ctrl *gomock.Controller) *MockUserSearch {
	mock := &MockUserSearch{ctrl: ctrl}
	mock.recorder = &MockUserSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSearch) EXPECT() *MockUserSearchMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockUserSearch) Query(query string, opts infra.QueryOptions) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query, opts)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockUserSearchMockRecorder) Query(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockUserSearch)(nil).Query), query, opts)
}
