// Code generated by MockGen. DO NOT EDIT.
// Source: repo/snapshot_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
	repo "github.com/kouprlabs/voltaserve/api/repo"
)

// MockSnapshotRepo is a mock of SnapshotRepo interface.
type MockSnapshotRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotRepoMockRecorder
}

// MockSnapshotRepoMockRecorder is the mock recorder for MockSnapshotRepo.
type MockSnapshotRepoMockRecorder struct {
	mock *MockSnapshotRepo
}

// NewMockSnapshotRepo creates a new mock instance.
func NewMockSnapshotRepo(ctrl *gomock.Controller) *MockSnapshotRepo {
	mock := &MockSnapshotRepo{ctrl: ctrl}
	mock.recorder = &MockSnapshotRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotRepo) EXPECT() *MockSnapshotRepoMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockSnapshotRepo) Attach(sourceFileID, targetFileID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", sourceFileID, targetFileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attach indicates an expected call of Attach.
func (mr *MockSnapshotRepoMockRecorder) Attach(sourceFileID, targetFileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockSnapshotRepo)(nil).Attach), sourceFileID, targetFileID)
}

// BulkMapWithFile mocks base method.
func (m *MockSnapshotRepo) BulkMapWithFile(entities []*repo.SnapshotFileEntity, chunkSize int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkMapWithFile", entities, chunkSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkMapWithFile indicates an expected call of BulkMapWithFile.
func (mr *MockSnapshotRepoMockRecorder) BulkMapWithFile(entities, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkMapWithFile", reflect.TypeOf((*MockSnapshotRepo)(nil).BulkMapWithFile), entities, chunkSize)
}

// CountAssociations mocks base method.
func (m *MockSnapshotRepo) CountAssociations(id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAssociations", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAssociations indicates an expected call of CountAssociations.
func (mr *MockSnapshotRepoMockRecorder) CountAssociations(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAssociations", reflect.TypeOf((*MockSnapshotRepo)(nil).CountAssociations), id)
}

// Delete mocks base method.
func (m *MockSnapshotRepo) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSnapshotRepoMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSnapshotRepo)(nil).Delete), id)
}

// DeleteAllDangling mocks base method.
func (m *MockSnapshotRepo) DeleteAllDangling() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllDangling")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllDangling indicates an expected call of DeleteAllDangling.
func (mr *MockSnapshotRepoMockRecorder) DeleteAllDangling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllDangling", reflect.TypeOf((*MockSnapshotRepo)(nil).DeleteAllDangling))
}

// DeleteMappingsForFile mocks base method.
func (m *MockSnapshotRepo) DeleteMappingsForFile(fileID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMappingsForFile", fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMappingsForFile indicates an expected call of DeleteMappingsForFile.
func (mr *MockSnapshotRepoMockRecorder) DeleteMappingsForFile(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMappingsForFile", reflect.TypeOf((*MockSnapshotRepo)(nil).DeleteMappingsForFile), fileID)
}

// DeleteMappingsForTree mocks base method.
func (m *MockSnapshotRepo) DeleteMappingsForTree(fileID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMappingsForTree", fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMappingsForTree indicates an expected call of DeleteMappingsForTree.
func (mr *MockSnapshotRepoMockRecorder) DeleteMappingsForTree(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMappingsForTree", reflect.TypeOf((*MockSnapshotRepo)(nil).DeleteMappingsForTree), fileID)
}

// Detach mocks base method.
func (m *MockSnapshotRepo) Detach(id, fileID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detach", id, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Detach indicates an expected call of Detach.
func (mr *MockSnapshotRepoMockRecorder) Detach(id, fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detach", reflect.TypeOf((*MockSnapshotRepo)(nil).Detach), id, fileID)
}

// Find mocks base method.
func (m *MockSnapshotRepo) Find(id string) (model.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(model.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSnapshotRepoMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSnapshotRepo)(nil).Find), id)
}

// FindAllDangling mocks base method.
func (m *MockSnapshotRepo) FindAllDangling() ([]model.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllDangling")
	ret0, _ := ret[0].([]model.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllDangling indicates an expected call of FindAllDangling.
func (mr *MockSnapshotRepoMockRecorder) FindAllDangling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllDangling", reflect.TypeOf((*MockSnapshotRepo)(nil).FindAllDangling))
}

// FindAllForFile mocks base method.
func (m *MockSnapshotRepo) FindAllForFile(fileID string) ([]model.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllForFile", fileID)
	ret0, _ := ret[0].([]model.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllForFile indicates an expected call of FindAllForFile.
func (mr *MockSnapshotRepoMockRecorder) FindAllForFile(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllForFile", reflect.TypeOf((*MockSnapshotRepo)(nil).FindAllForFile), fileID)
}

// FindAllForTask mocks base method.
func (m *MockSnapshotRepo) FindAllForTask(taskID string) ([]model.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllForTask", taskID)
	ret0, _ := ret[0].([]model.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllForTask indicates an expected call of FindAllForTask.
func (mr *MockSnapshotRepoMockRecorder) FindAllForTask(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllForTask", reflect.TypeOf((*MockSnapshotRepo)(nil).FindAllForTask), taskID)
}

// FindAllPrevious mocks base method.
func (m *MockSnapshotRepo) FindAllPrevious(fileID string, version int64) ([]model.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPrevious", fileID, version)
	ret0, _ := ret[0].([]model.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPrevious indicates an expected call of FindAllPrevious.
func (mr *MockSnapshotRepoMockRecorder) FindAllPrevious(fileID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPrevious", reflect.TypeOf((*MockSnapshotRepo)(nil).FindAllPrevious), fileID, version)
}

// FindByVersion mocks base method.
func (m *MockSnapshotRepo) FindByVersion(version int64) (model.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByVersion", version)
	ret0, _ := ret[0].(model.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByVersion indicates an expected call of FindByVersion.
func (mr *MockSnapshotRepoMockRecorder) FindByVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByVersion", reflect.TypeOf((*MockSnapshotRepo)(nil).FindByVersion), version)
}

// FindExclusiveForFile mocks base method.
func (m *MockSnapshotRepo) FindExclusiveForFile(fileID string) ([]model.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExclusiveForFile", fileID)
	ret0, _ := ret[0].([]model.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExclusiveForFile indicates an expected call of FindExclusiveForFile.
func (mr *MockSnapshotRepoMockRecorder) FindExclusiveForFile(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExclusiveForFile", reflect.TypeOf((*MockSnapshotRepo)(nil).FindExclusiveForFile), fileID)
}

// FindFileID mocks base method.
func (m *MockSnapshotRepo) FindFileID(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFileID", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFileID indicates an expected call of FindFileID.
func (mr *MockSnapshotRepoMockRecorder) FindFileID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFileID", reflect.TypeOf((*MockSnapshotRepo)(nil).FindFileID), id)
}

// FindIDsByFile mocks base method.
func (m *MockSnapshotRepo) FindIDsByFile(fileID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDsByFile", fileID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIDsByFile indicates an expected call of FindIDsByFile.
func (mr *MockSnapshotRepoMockRecorder) FindIDsByFile(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDsByFile", reflect.TypeOf((*MockSnapshotRepo)(nil).FindIDsByFile), fileID)
}

// FindLatestVersionForFile mocks base method.
func (m *MockSnapshotRepo) FindLatestVersionForFile(fileID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestVersionForFile", fileID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestVersionForFile indicates an expected call of FindLatestVersionForFile.
func (mr *MockSnapshotRepoMockRecorder) FindLatestVersionForFile(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestVersionForFile", reflect.TypeOf((*MockSnapshotRepo)(nil).FindLatestVersionForFile), fileID)
}

// Insert mocks base method.
func (m *MockSnapshotRepo) Insert(snapshot model.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", snapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSnapshotRepoMockRecorder) Insert(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSnapshotRepo)(nil).Insert), snapshot)
}

// MapWithFile mocks base method.
func (m *MockSnapshotRepo) MapWithFile(id, fileID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapWithFile", id, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MapWithFile indicates an expected call of MapWithFile.
func (mr *MockSnapshotRepoMockRecorder) MapWithFile(id, fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapWithFile", reflect.TypeOf((*MockSnapshotRepo)(nil).MapWithFile), id, fileID)
}

// Save mocks base method.
func (m *MockSnapshotRepo) Save(snapshot model.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", snapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSnapshotRepoMockRecorder) Save(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSnapshotRepo)(nil).Save), snapshot)
}

// Update mocks base method.
func (m *MockSnapshotRepo) Update(id string, opts repo.SnapshotUpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSnapshotRepoMockRecorder) Update(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSnapshotRepo)(nil).Update), id, opts)
}
