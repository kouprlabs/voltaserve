// Code generated by MockGen. DO NOT EDIT.
// Source: repo/file_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
	repo "github.com/kouprlabs/voltaserve/api/repo"
)

// MockFileRepo is a mock of FileRepo interface.
type MockFileRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepoMockRecorder
}

// MockFileRepoMockRecorder is the mock recorder for MockFileRepo.
type MockFileRepoMockRecorder struct {
	mock *MockFileRepo
}

// NewMockFileRepo creates a new mock instance.
func NewMockFileRepo(ctrl *gomock.Controller) *MockFileRepo {
	mock := &MockFileRepo{ctrl: ctrl}
	mock.recorder = &MockFileRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepo) EXPECT() *MockFileRepoMockRecorder {
	return m.recorder
}

// BulkInsert mocks base method.
func (m *MockFileRepo) BulkInsert(values []model.File, chunkSize int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsert", values, chunkSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsert indicates an expected call of BulkInsert.
func (mr *MockFileRepoMockRecorder) BulkInsert(values, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsert", reflect.TypeOf((*MockFileRepo)(nil).BulkInsert), values, chunkSize)
}

// BulkInsertPermissions mocks base method.
func (m *MockFileRepo) BulkInsertPermissions(values []model.UserPermission, chunkSize int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertPermissions", values, chunkSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsertPermissions indicates an expected call of BulkInsertPermissions.
func (mr *MockFileRepoMockRecorder) BulkInsertPermissions(values, chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertPermissions", reflect.TypeOf((*MockFileRepo)(nil).BulkInsertPermissions), values, chunkSize)
}

// ClearSnapshotID mocks base method.
func (m *MockFileRepo) ClearSnapshotID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearSnapshotID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearSnapshotID indicates an expected call of ClearSnapshotID.
func (mr *MockFileRepoMockRecorder) ClearSnapshotID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSnapshotID", reflect.TypeOf((*MockFileRepo)(nil).ClearSnapshotID), id)
}

// ComputeSize mocks base method.
func (m *MockFileRepo) ComputeSize(id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeSize", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeSize indicates an expected call of ComputeSize.
func (mr *MockFileRepoMockRecorder) ComputeSize(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeSize", reflect.TypeOf((*MockFileRepo)(nil).ComputeSize), id)
}

// Count mocks base method.
func (m *MockFileRepo) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockFileRepoMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockFileRepo)(nil).Count))
}

// CountChildren mocks base method.
func (m *MockFileRepo) CountChildren(id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountChildren", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountChildren indicates an expected call of CountChildren.
func (mr *MockFileRepoMockRecorder) CountChildren(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountChildren", reflect.TypeOf((*MockFileRepo)(nil).CountChildren), id)
}

// CountItems mocks base method.
func (m *MockFileRepo) CountItems(id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountItems", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountItems indicates an expected call of CountItems.
func (mr *MockFileRepoMockRecorder) CountItems(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountItems", reflect.TypeOf((*MockFileRepo)(nil).CountItems), id)
}

// Delete mocks base method.
func (m *MockFileRepo) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileRepoMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileRepo)(nil).Delete), id)
}

// DeleteChunk mocks base method.
func (m *MockFileRepo) DeleteChunk(ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChunk", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChunk indicates an expected call of DeleteChunk.
func (mr *MockFileRepoMockRecorder) DeleteChunk(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChunk", reflect.TypeOf((*MockFileRepo)(nil).DeleteChunk), ids)
}

// Find mocks base method.
func (m *MockFileRepo) Find(id string) (model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockFileRepoMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFileRepo)(nil).Find), id)
}

// FindChildren mocks base method.
func (m *MockFileRepo) FindChildren(id string) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChildren", id)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChildren indicates an expected call of FindChildren.
func (mr *MockFileRepoMockRecorder) FindChildren(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChildren", reflect.TypeOf((*MockFileRepo)(nil).FindChildren), id)
}

// FindChildrenIDs mocks base method.
func (m *MockFileRepo) FindChildrenIDs(id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChildrenIDs", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChildrenIDs indicates an expected call of FindChildrenIDs.
func (mr *MockFileRepoMockRecorder) FindChildrenIDs(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChildrenIDs", reflect.TypeOf((*MockFileRepo)(nil).FindChildrenIDs), id)
}

// FindIDsBySnapshot mocks base method.
func (m *MockFileRepo) FindIDsBySnapshot(snapshotID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDsBySnapshot", snapshotID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIDsBySnapshot indicates an expected call of FindIDsBySnapshot.
func (mr *MockFileRepoMockRecorder) FindIDsBySnapshot(snapshotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDsBySnapshot", reflect.TypeOf((*MockFileRepo)(nil).FindIDsBySnapshot), snapshotID)
}

// FindIDsByWorkspace mocks base method.
func (m *MockFileRepo) FindIDsByWorkspace(workspaceID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDsByWorkspace", workspaceID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIDsByWorkspace indicates an expected call of FindIDsByWorkspace.
func (mr *MockFileRepoMockRecorder) FindIDsByWorkspace(workspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDsByWorkspace", reflect.TypeOf((*MockFileRepo)(nil).FindIDsByWorkspace), workspaceID)
}

// FindPath mocks base method.
func (m *MockFileRepo) FindPath(id string) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPath", id)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPath indicates an expected call of FindPath.
func (mr *MockFileRepoMockRecorder) FindPath(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPath", reflect.TypeOf((*MockFileRepo)(nil).FindPath), id)
}

// FindTree mocks base method.
func (m *MockFileRepo) FindTree(id string) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTree", id)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTree indicates an expected call of FindTree.
func (mr *MockFileRepoMockRecorder) FindTree(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTree", reflect.TypeOf((*MockFileRepo)(nil).FindTree), id)
}

// FindTreeIDs mocks base method.
func (m *MockFileRepo) FindTreeIDs(id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTreeIDs", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTreeIDs indicates an expected call of FindTreeIDs.
func (mr *MockFileRepoMockRecorder) FindTreeIDs(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTreeIDs", reflect.TypeOf((*MockFileRepo)(nil).FindTreeIDs), id)
}

// GrantGroupPermission mocks base method.
func (m *MockFileRepo) GrantGroupPermission(id, groupID, permission string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantGroupPermission", id, groupID, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantGroupPermission indicates an expected call of GrantGroupPermission.
func (mr *MockFileRepoMockRecorder) GrantGroupPermission(id, groupID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantGroupPermission", reflect.TypeOf((*MockFileRepo)(nil).GrantGroupPermission), id, groupID, permission)
}

// GrantUserPermission mocks base method.
func (m *MockFileRepo) GrantUserPermission(id, userID, permission string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPermission", id, userID, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantUserPermission indicates an expected call of GrantUserPermission.
func (mr *MockFileRepoMockRecorder) GrantUserPermission(id, userID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermission", reflect.TypeOf((*MockFileRepo)(nil).GrantUserPermission), id, userID, permission)
}

// Insert mocks base method.
func (m *MockFileRepo) Insert(opts repo.FileInsertOptions) (model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", opts)
	ret0, _ := ret[0].(model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockFileRepoMockRecorder) Insert(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFileRepo)(nil).Insert), opts)
}

// IsGrandChildOf mocks base method.
func (m *MockFileRepo) IsGrandChildOf(id, ancestorID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGrandChildOf", id, ancestorID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsGrandChildOf indicates an expected call of IsGrandChildOf.
func (mr *MockFileRepoMockRecorder) IsGrandChildOf(id, ancestorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGrandChildOf", reflect.TypeOf((*MockFileRepo)(nil).IsGrandChildOf), id, ancestorID)
}

// MoveSourceIntoTarget mocks base method.
func (m *MockFileRepo) MoveSourceIntoTarget(targetID, sourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveSourceIntoTarget", targetID, sourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveSourceIntoTarget indicates an expected call of MoveSourceIntoTarget.
func (mr *MockFileRepoMockRecorder) MoveSourceIntoTarget(targetID, sourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveSourceIntoTarget", reflect.TypeOf((*MockFileRepo)(nil).MoveSourceIntoTarget), targetID, sourceID)
}

// PopulateModelFieldsForUser mocks base method.
func (m *MockFileRepo) PopulateModelFieldsForUser(files []model.File, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateModelFieldsForUser", files, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateModelFieldsForUser indicates an expected call of PopulateModelFieldsForUser.
func (mr *MockFileRepoMockRecorder) PopulateModelFieldsForUser(files, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateModelFieldsForUser", reflect.TypeOf((*MockFileRepo)(nil).PopulateModelFieldsForUser), files, userID)
}

// RevokeGroupPermission mocks base method.
func (m *MockFileRepo) RevokeGroupPermission(tree []model.File, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeGroupPermission", tree, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeGroupPermission indicates an expected call of RevokeGroupPermission.
func (mr *MockFileRepoMockRecorder) RevokeGroupPermission(tree, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeGroupPermission", reflect.TypeOf((*MockFileRepo)(nil).RevokeGroupPermission), tree, groupID)
}

// RevokeUserPermission mocks base method.
func (m *MockFileRepo) RevokeUserPermission(tree []model.File, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserPermission", tree, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeUserPermission indicates an expected call of RevokeUserPermission.
func (mr *MockFileRepoMockRecorder) RevokeUserPermission(tree, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserPermission", reflect.TypeOf((*MockFileRepo)(nil).RevokeUserPermission), tree, userID)
}

// Save mocks base method.
func (m *MockFileRepo) Save(file model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFileRepoMockRecorder) Save(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileRepo)(nil).Save), file)
}
