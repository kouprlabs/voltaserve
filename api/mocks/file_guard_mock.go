// Code generated by MockGen. DO NOT EDIT.
// Source: guard/file_guard.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockFileGuard is a mock of FileGuard interface.
type MockFileGuard struct {
	ctrl     *gomock.Controller
	recorder *MockFileGuardMockRecorder
}

// MockFileGuardMockRecorder is the mock recorder for MockFileGuard.
type MockFileGuardMockRecorder struct {
	mock *MockFileGuard
}

// NewMockFileGuard creates a new mock instance.
func NewMockFileGuard(ctrl *gomock.Controller) *MockFileGuard {
	mock := &MockFileGuard{ctrl: ctrl}
	mock.recorder = &MockFileGuardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileGuard) EXPECT() *MockFileGuardMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockFileGuard) Authorize(userID string, file model.File, permission string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", userID, file, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authorize indicates an expected call of Authorize.
func (mr *MockFileGuardMockRecorder) Authorize(userID, file, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockFileGuard)(nil).Authorize), userID, file, permission)
}

// IsAuthorized mocks base method.
func (m *MockFileGuard) IsAuthorized(userID string, file model.File, permission string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", userID, file, permission)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockFileGuardMockRecorder) IsAuthorized(userID, file, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockFileGuard)(nil).IsAuthorized), userID, file, permission)
}
