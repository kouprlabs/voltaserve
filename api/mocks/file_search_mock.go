// Code generated by MockGen. DO NOT EDIT.
// Source: search/file_search.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	infra "github.com/kouprlabs/voltaserve/api/infra"
	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockFileSearch is a mock of FileSearch interface.
type MockFileSearch struct {
	ctrl     *gomock.Controller
	recorder *MockFileSearchMockRecorder
}

// MockFileSearchMockRecorder is the mock recorder for MockFileSearch.
type MockFileSearchMockRecorder struct {
	mock *MockFileSearch
}

// NewMockFileSearch creates a new mock instance.
func NewMockFileSearch(ctrl *gomock.Controller) *MockFileSearch {
	mock := &MockFileSearch{ctrl: ctrl}
	mock.recorder = &MockFileSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSearch) EXPECT() *MockFileSearchMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFileSearch) Delete(ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileSearchMockRecorder) Delete(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileSearch)(nil).Delete), ids)
}

// Index mocks base method.
func (m *MockFileSearch) Index(files []model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", files)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockFileSearchMockRecorder) Index(files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockFileSearch)(nil).Index), files)
}

// Query mocks base method.
func (m *MockFileSearch) Query(query string, opts infra.QueryOptions) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query, opts)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockFileSearchMockRecorder) Query(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockFileSearch)(nil).Query), query, opts)
}

// Update mocks base method.
func (m *MockFileSearch) Update(files []model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", files)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFileSearchMockRecorder) Update(files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFileSearch)(nil).Update), files)
}
