// Code generated by MockGen. DO NOT EDIT.
// Source: search/workspace_search.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	infra "github.com/kouprlabs/voltaserve/api/infra"
	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockWorkspaceSearch is a mock of WorkspaceSearch interface.
type MockWorkspaceSearch struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceSearchMockRecorder
}

// MockWorkspaceSearchMockRecorder is the mock recorder for MockWorkspaceSearch.
type MockWorkspaceSearchMockRecorder struct {
	mock *MockWorkspaceSearch
}

// NewMockWorkspaceSearch creates a new mock instance.
func NewMockWorkspaceSearch(ctrl *gomock.Controller) *MockWorkspaceSearch {
	mock := &MockWorkspaceSearch{ctrl: ctrl}
	mock.recorder = &MockWorkspaceSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceSearch) EXPECT() *MockWorkspaceSearchMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockWorkspaceSearch) Delete(ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWorkspaceSearchMockRecorder) Delete(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkspaceSearch)(nil).Delete), ids)
}

// Index mocks base method.
func (m *MockWorkspaceSearch) Index(workspaces []model.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", workspaces)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockWorkspaceSearchMockRecorder) Index(workspaces interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockWorkspaceSearch)(nil).Index), workspaces)
}

// Query mocks base method.
func (m *MockWorkspaceSearch) Query(query string, opts infra.QueryOptions) ([]model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query, opts)
	ret0, _ := ret[0].([]model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockWorkspaceSearchMockRecorder) Query(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockWorkspaceSearch)(nil).Query), query, opts)
}

// Update mocks base method.
func (m *MockWorkspaceSearch) Update(workspaces []model.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", workspaces)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWorkspaceSearchMockRecorder) Update(workspaces interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWorkspaceSearch)(nil).Update), workspaces)
}
