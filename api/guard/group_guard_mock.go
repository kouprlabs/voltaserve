// Code generated by MockGen. DO NOT EDIT.
// Source: guard/group_guard.go

// Package mocks is a generated GoMock package.
package guard

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockGroupGuard is a mock of GroupGuard interface.
type MockGroupGuard struct {
	ctrl     *gomock.Controller
	recorder *MockGroupGuardMockRecorder
}

// MockGroupGuardMockRecorder is the mock recorder for MockGroupGuard.
type MockGroupGuardMockRecorder struct {
	mock *MockGroupGuard
}

// NewMockGroupGuard creates a new mock instance.
func NewMockGroupGuard(ctrl *gomock.Controller) *MockGroupGuard {
	mock := &MockGroupGuard{ctrl: ctrl}
	mock.recorder = &MockGroupGuardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupGuard) EXPECT() *MockGroupGuardMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockGroupGuard) Authorize(userID string, group model.Group, permission string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", userID, group, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authorize indicates an expected call of Authorize.
func (mr *MockGroupGuardMockRecorder) Authorize(userID, group, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockGroupGuard)(nil).Authorize), userID, group, permission)
}

// IsAuthorized mocks base method.
func (m *MockGroupGuard) IsAuthorized(userID string, group model.Group, permission string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", userID, group, permission)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *MockGroupGuardMockRecorder) IsAuthorized(userID, group, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockGroupGuard)(nil).IsAuthorized), userID, group, permission)
}
