// Code generated by MockGen. DO NOT EDIT.
// Source: repo/invitation_repo.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockInvitationRepo is a mock of InvitationRepo interface.
type MockInvitationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockInvitationRepoMockRecorder
}

// MockInvitationRepoMockRecorder is the mock recorder for MockInvitationRepo.
type MockInvitationRepoMockRecorder struct {
	mock *MockInvitationRepo
}

// NewMockInvitationRepo creates a new mock instance.
func NewMockInvitationRepo(ctrl *gomock.Controller) *MockInvitationRepo {
	mock := &MockInvitationRepo{ctrl: ctrl}
	mock.recorder = &MockInvitationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvitationRepo) EXPECT() *MockInvitationRepoMockRecorder {
	return m.recorder
}

// CountIncoming mocks base method.
func (m *MockInvitationRepo) CountIncoming(email string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountIncoming", email)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountIncoming indicates an expected call of CountIncoming.
func (mr *MockInvitationRepoMockRecorder) CountIncoming(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountIncoming", reflect.TypeOf((*MockInvitationRepo)(nil).CountIncoming), email)
}

// Delete mocks base method.
func (m *MockInvitationRepo) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInvitationRepoMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInvitationRepo)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockInvitationRepo) Find(id string) (model.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(model.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockInvitationRepoMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockInvitationRepo)(nil).Find), id)
}

// FindIncoming mocks base method.
func (m *MockInvitationRepo) FindIncoming(email string) ([]model.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIncoming", email)
	ret0, _ := ret[0].([]model.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIncoming indicates an expected call of FindIncoming.
func (mr *MockInvitationRepoMockRecorder) FindIncoming(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIncoming", reflect.TypeOf((*MockInvitationRepo)(nil).FindIncoming), email)
}

// FindOutgoing mocks base method.
func (m *MockInvitationRepo) FindOutgoing(orgID, userID string) ([]model.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOutgoing", orgID, userID)
	ret0, _ := ret[0].([]model.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOutgoing indicates an expected call of FindOutgoing.
func (mr *MockInvitationRepoMockRecorder) FindOutgoing(orgID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOutgoing", reflect.TypeOf((*MockInvitationRepo)(nil).FindOutgoing), orgID, userID)
}

// Insert mocks base method.
func (m *MockInvitationRepo) Insert(opts InvitationInsertOptions) ([]model.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", opts)
	ret0, _ := ret[0].([]model.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockInvitationRepoMockRecorder) Insert(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockInvitationRepo)(nil).Insert), opts)
}

// Save mocks base method.
func (m *MockInvitationRepo) Save(org model.Invitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockInvitationRepoMockRecorder) Save(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockInvitationRepo)(nil).Save), org)
}
