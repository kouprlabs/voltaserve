// Code generated by MockGen. DO NOT EDIT.
// Source: repo/workspace_repo.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockWorkspaceRepo is a mock of WorkspaceRepo interface.
type MockWorkspaceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceRepoMockRecorder
}

// MockWorkspaceRepoMockRecorder is the mock recorder for MockWorkspaceRepo.
type MockWorkspaceRepoMockRecorder struct {
	mock *MockWorkspaceRepo
}

// NewMockWorkspaceRepo creates a new mock instance.
func NewMockWorkspaceRepo(ctrl *gomock.Controller) *MockWorkspaceRepo {
	mock := &MockWorkspaceRepo{ctrl: ctrl}
	mock.recorder = &MockWorkspaceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceRepo) EXPECT() *MockWorkspaceRepoMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockWorkspaceRepo) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockWorkspaceRepoMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockWorkspaceRepo)(nil).Count))
}

// Delete mocks base method.
func (m *MockWorkspaceRepo) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWorkspaceRepoMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkspaceRepo)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockWorkspaceRepo) Find(id string) (model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockWorkspaceRepoMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockWorkspaceRepo)(nil).Find), id)
}

// FindIDs mocks base method.
func (m *MockWorkspaceRepo) FindIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIDs indicates an expected call of FindIDs.
func (mr *MockWorkspaceRepoMockRecorder) FindIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDs", reflect.TypeOf((*MockWorkspaceRepo)(nil).FindIDs))
}

// FindIDsByOrganization mocks base method.
func (m *MockWorkspaceRepo) FindIDsByOrganization(orgID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDsByOrganization", orgID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIDsByOrganization indicates an expected call of FindIDsByOrganization.
func (mr *MockWorkspaceRepoMockRecorder) FindIDsByOrganization(orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDsByOrganization", reflect.TypeOf((*MockWorkspaceRepo)(nil).FindIDsByOrganization), orgID)
}

// GrantUserPermission mocks base method.
func (m *MockWorkspaceRepo) GrantUserPermission(id, userID, permission string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPermission", id, userID, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantUserPermission indicates an expected call of GrantUserPermission.
func (mr *MockWorkspaceRepoMockRecorder) GrantUserPermission(id, userID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermission", reflect.TypeOf((*MockWorkspaceRepo)(nil).GrantUserPermission), id, userID, permission)
}

// Insert mocks base method.
func (m *MockWorkspaceRepo) Insert(opts WorkspaceInsertOptions) (model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", opts)
	ret0, _ := ret[0].(model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockWorkspaceRepoMockRecorder) Insert(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWorkspaceRepo)(nil).Insert), opts)
}

// RevokeUserPermission mocks base method.
func (m *MockWorkspaceRepo) RevokeUserPermission(id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserPermission", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeUserPermission indicates an expected call of RevokeUserPermission.
func (mr *MockWorkspaceRepoMockRecorder) RevokeUserPermission(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserPermission", reflect.TypeOf((*MockWorkspaceRepo)(nil).RevokeUserPermission), id, userID)
}

// UpdateName mocks base method.
func (m *MockWorkspaceRepo) UpdateName(id, name string) (model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", id, name)
	ret0, _ := ret[0].(model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockWorkspaceRepoMockRecorder) UpdateName(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockWorkspaceRepo)(nil).UpdateName), id, name)
}

// UpdateRootID mocks base method.
func (m *MockWorkspaceRepo) UpdateRootID(id, rootNodeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRootID", id, rootNodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRootID indicates an expected call of UpdateRootID.
func (mr *MockWorkspaceRepoMockRecorder) UpdateRootID(id, rootNodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRootID", reflect.TypeOf((*MockWorkspaceRepo)(nil).UpdateRootID), id, rootNodeID)
}

// UpdateStorageCapacity mocks base method.
func (m *MockWorkspaceRepo) UpdateStorageCapacity(id string, storageCapacity int64) (model.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorageCapacity", id, storageCapacity)
	ret0, _ := ret[0].(model.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStorageCapacity indicates an expected call of UpdateStorageCapacity.
func (mr *MockWorkspaceRepoMockRecorder) UpdateStorageCapacity(id, storageCapacity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageCapacity", reflect.TypeOf((*MockWorkspaceRepo)(nil).UpdateStorageCapacity), id, storageCapacity)
}
