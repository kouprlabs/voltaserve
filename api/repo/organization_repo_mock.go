// Code generated by MockGen. DO NOT EDIT.
// Source: repo/organization_repo.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockOrganizationRepo is a mock of OrganizationRepo interface.
type MockOrganizationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationRepoMockRecorder
}

// MockOrganizationRepoMockRecorder is the mock recorder for MockOrganizationRepo.
type MockOrganizationRepoMockRecorder struct {
	mock *MockOrganizationRepo
}

// NewMockOrganizationRepo creates a new mock instance.
func NewMockOrganizationRepo(ctrl *gomock.Controller) *MockOrganizationRepo {
	mock := &MockOrganizationRepo{ctrl: ctrl}
	mock.recorder = &MockOrganizationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationRepo) EXPECT() *MockOrganizationRepoMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockOrganizationRepo) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockOrganizationRepoMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockOrganizationRepo)(nil).Count))
}

// CountOwners mocks base method.
func (m *MockOrganizationRepo) CountOwners(id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOwners", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOwners indicates an expected call of CountOwners.
func (mr *MockOrganizationRepoMockRecorder) CountOwners(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOwners", reflect.TypeOf((*MockOrganizationRepo)(nil).CountOwners), id)
}

// Delete mocks base method.
func (m *MockOrganizationRepo) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrganizationRepoMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrganizationRepo)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockOrganizationRepo) Find(id string) (model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockOrganizationRepoMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockOrganizationRepo)(nil).Find), id)
}

// FindGroups mocks base method.
func (m *MockOrganizationRepo) FindGroups(id string) ([]model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGroups", id)
	ret0, _ := ret[0].([]model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGroups indicates an expected call of FindGroups.
func (mr *MockOrganizationRepoMockRecorder) FindGroups(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGroups", reflect.TypeOf((*MockOrganizationRepo)(nil).FindGroups), id)
}

// FindIDs mocks base method.
func (m *MockOrganizationRepo) FindIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIDs indicates an expected call of FindIDs.
func (mr *MockOrganizationRepoMockRecorder) FindIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDs", reflect.TypeOf((*MockOrganizationRepo)(nil).FindIDs))
}

// FindMembers mocks base method.
func (m *MockOrganizationRepo) FindMembers(id string) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMembers", id)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMembers indicates an expected call of FindMembers.
func (mr *MockOrganizationRepoMockRecorder) FindMembers(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMembers", reflect.TypeOf((*MockOrganizationRepo)(nil).FindMembers), id)
}

// GrantUserPermission mocks base method.
func (m *MockOrganizationRepo) GrantUserPermission(id, userID, permission string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPermission", id, userID, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantUserPermission indicates an expected call of GrantUserPermission.
func (mr *MockOrganizationRepoMockRecorder) GrantUserPermission(id, userID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermission", reflect.TypeOf((*MockOrganizationRepo)(nil).GrantUserPermission), id, userID, permission)
}

// Insert mocks base method.
func (m *MockOrganizationRepo) Insert(opts OrganizationInsertOptions) (model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", opts)
	ret0, _ := ret[0].(model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockOrganizationRepoMockRecorder) Insert(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrganizationRepo)(nil).Insert), opts)
}

// RevokeUserPermission mocks base method.
func (m *MockOrganizationRepo) RevokeUserPermission(id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserPermission", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeUserPermission indicates an expected call of RevokeUserPermission.
func (mr *MockOrganizationRepoMockRecorder) RevokeUserPermission(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserPermission", reflect.TypeOf((*MockOrganizationRepo)(nil).RevokeUserPermission), id, userID)
}

// Save mocks base method.
func (m *MockOrganizationRepo) Save(org model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockOrganizationRepoMockRecorder) Save(org interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOrganizationRepo)(nil).Save), org)
}
