// Code generated by MockGen. DO NOT EDIT.
// Source: repo/permission_repo.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockPermissionRepo is a mock of PermissionRepo interface.
type MockPermissionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionRepoMockRecorder
}

// MockPermissionRepoMockRecorder is the mock recorder for MockPermissionRepo.
type MockPermissionRepoMockRecorder struct {
	mock *MockPermissionRepo
}

// NewMockPermissionRepo creates a new mock instance.
func NewMockPermissionRepo(ctrl *gomock.Controller) *MockPermissionRepo {
	mock := &MockPermissionRepo{ctrl: ctrl}
	mock.recorder = &MockPermissionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionRepo) EXPECT() *MockPermissionRepoMockRecorder {
	return m.recorder
}

// FindGroupPermissions mocks base method.
func (m *MockPermissionRepo) FindGroupPermissions(id string) ([]model.GroupPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGroupPermissions", id)
	ret0, _ := ret[0].([]model.GroupPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGroupPermissions indicates an expected call of FindGroupPermissions.
func (mr *MockPermissionRepoMockRecorder) FindGroupPermissions(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGroupPermissions", reflect.TypeOf((*MockPermissionRepo)(nil).FindGroupPermissions), id)
}

// FindUserPermissions mocks base method.
func (m *MockPermissionRepo) FindUserPermissions(id string) ([]model.UserPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserPermissions", id)
	ret0, _ := ret[0].([]model.UserPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserPermissions indicates an expected call of FindUserPermissions.
func (mr *MockPermissionRepoMockRecorder) FindUserPermissions(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserPermissions", reflect.TypeOf((*MockPermissionRepo)(nil).FindUserPermissions), id)
}
