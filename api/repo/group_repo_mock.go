// Code generated by MockGen. DO NOT EDIT.
// Source: repo/group_repo.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/kouprlabs/voltaserve/api/model"
)

// MockGroupRepo is a mock of GroupRepo interface.
type MockGroupRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepoMockRecorder
}

// MockGroupRepoMockRecorder is the mock recorder for MockGroupRepo.
type MockGroupRepoMockRecorder struct {
	mock *MockGroupRepo
}

// NewMockGroupRepo creates a new mock instance.
func NewMockGroupRepo(ctrl *gomock.Controller) *MockGroupRepo {
	mock := &MockGroupRepo{ctrl: ctrl}
	mock.recorder = &MockGroupRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepo) EXPECT() *MockGroupRepoMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockGroupRepo) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockGroupRepoMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockGroupRepo)(nil).Count))
}

// CountOwners mocks base method.
func (m *MockGroupRepo) CountOwners(id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOwners", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOwners indicates an expected call of CountOwners.
func (mr *MockGroupRepoMockRecorder) CountOwners(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOwners", reflect.TypeOf((*MockGroupRepo)(nil).CountOwners), id)
}

// Delete mocks base method.
func (m *MockGroupRepo) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupRepoMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupRepo)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockGroupRepo) Find(id string) (model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGroupRepoMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGroupRepo)(nil).Find), id)
}

// FindIDs mocks base method.
func (m *MockGroupRepo) FindIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIDs indicates an expected call of FindIDs.
func (mr *MockGroupRepoMockRecorder) FindIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDs", reflect.TypeOf((*MockGroupRepo)(nil).FindIDs))
}

// FindIDsByFile mocks base method.
func (m *MockGroupRepo) FindIDsByFile(fileID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDsByFile", fileID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIDsByFile indicates an expected call of FindIDsByFile.
func (mr *MockGroupRepoMockRecorder) FindIDsByFile(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDsByFile", reflect.TypeOf((*MockGroupRepo)(nil).FindIDsByFile), fileID)
}

// FindIDsByOrganization mocks base method.
func (m *MockGroupRepo) FindIDsByOrganization(id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDsByOrganization", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIDsByOrganization indicates an expected call of FindIDsByOrganization.
func (mr *MockGroupRepoMockRecorder) FindIDsByOrganization(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDsByOrganization", reflect.TypeOf((*MockGroupRepo)(nil).FindIDsByOrganization), id)
}

// FindMembers mocks base method.
func (m *MockGroupRepo) FindMembers(id string) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMembers", id)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMembers indicates an expected call of FindMembers.
func (mr *MockGroupRepoMockRecorder) FindMembers(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMembers", reflect.TypeOf((*MockGroupRepo)(nil).FindMembers), id)
}

// GrantUserPermission mocks base method.
func (m *MockGroupRepo) GrantUserPermission(id, userID, permission string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPermission", id, userID, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantUserPermission indicates an expected call of GrantUserPermission.
func (mr *MockGroupRepoMockRecorder) GrantUserPermission(id, userID, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermission", reflect.TypeOf((*MockGroupRepo)(nil).GrantUserPermission), id, userID, permission)
}

// Insert mocks base method.
func (m *MockGroupRepo) Insert(opts GroupInsertOptions) (model.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", opts)
	ret0, _ := ret[0].(model.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockGroupRepoMockRecorder) Insert(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGroupRepo)(nil).Insert), opts)
}

// RevokeUserPermission mocks base method.
func (m *MockGroupRepo) RevokeUserPermission(id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserPermission", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeUserPermission indicates an expected call of RevokeUserPermission.
func (mr *MockGroupRepoMockRecorder) RevokeUserPermission(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserPermission", reflect.TypeOf((*MockGroupRepo)(nil).RevokeUserPermission), id, userID)
}

// Save mocks base method.
func (m *MockGroupRepo) Save(group model.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", group)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockGroupRepoMockRecorder) Save(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGroupRepo)(nil).Save), group)
}
